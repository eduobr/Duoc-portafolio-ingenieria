DROP TABLE EVENTO;

/*
	CREAR REPORTE GLOBAL
	DATOS DE LOS CLIENTES
	DATOS DE LOS PAGOS
	DATOS DEL PROFESIONAL
	ASESORIAS, VISITAS Y CAPACITACIONES
	FILTRAR FECHA Y RUT DE LOS CLIENTES
	FILTRAR ENTRE DOS FECHAS

	CREAR REPORTE DE TODOS
	PRECIO
*/

CREATE TABLE EVENTO(
  idEvento NUMBER NOT NULL,
  descripcion VARCHAR2(255) NOT NULL,
  asesoria VARCHAR2(255),
  fecha DATE NOT NULL,
  idTipoEvento NUMBER NOT NULL,
  idPlan NUMBER NOT NULL,
  CONSTRAINT evento_pk PRIMARY KEY(idEvento),
  CONSTRAINT tipo_evento_fk FOREIGN KEY (idTipoEvento) REFERENCES TIPOEVENTO(idTipoEvento),
  CONSTRAINT evento_plan_fk FOREIGN KEY (idPlan) REFERENCES PLANCONTRATADO(idPlan)
);

CREATE TABLE VISITA(
	idVisita NUMBER NOT NULL,
	fecha DATE NOT NULL,
	idEstado NUMBER NOT NULL,
	idPlan NUMBER NOT NULL,
	CONSTRAINT visita_pk PRIMARY KEY(idVisita),
	CONSTRAINT visita_plan_fk FOREIGN KEY(idPlan) REFERENCES PLANCONTRATADO(idPlan)
);

CREATE SEQUENCE "IDVISITA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2 CACHE 20 NOORDER  NOCYCLE ;

DROP TABLE SERVICIO;

--Cambiada descripcion a VARCHAR2
CREATE TABLE SERVICIO(
  idServicio NUMBER NOT NULL,
  descripcion VARCHAR2(50) NOT NULL,
  CONSTRAINT servicio_pk PRIMARY KEY (idServicio)
);

CREATE OR REPLACE PACKAGE "NOMAS"."PKG_VISITA" 
IS
TYPE T_CURSOR_VISITA IS REF CURSOR;
PROCEDURE INSERTAR_VISITA(fecha_c DATE, idPlan_c NUMBER);
PROCEDURE MODIFICAR_VISITA(idVisita_c NUMBER, idEstado_c NUMBER);
PROCEDURE ELIMINAR_VISITA(idVisita_c NUMBER);
PROCEDURE LISTAR_VISITA(c_visita OUT T_CURSOR_VISITA);
END PKG_VISITA;

/

CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_VISITA" 
IS
PROCEDURE INSERTAR_VISITA(fecha_c DATE, idPlan_c NUMBER)
IS
BEGIN
	INSERT INTO VISITA VALUES(IDVISITA.NEXTVAL,fecha_c,0,idPlan_c);
	COMMIT;
	EXCEPTION
	      WHEN OTHERS THEN
	          ROLLBACK;
END INSERTAR_VISITA;

PROCEDURE MODIFICAR_VISITA(idVisita_c NUMBER, idEstado_c NUMBER)
IS
BEGIN
	UPDATE VISITA SET idEstado=idEstado_c WHERE idVisita=idVisita_c;
	EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
END MODIFICAR_VISITA;

PROCEDURE ELIMINAR_VISITA(idVisita_c NUMBER)
IS
BEGIN
	UPDATE VISITA SET idEstado=1 WHERE idVisita=idVisita_c;
	EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_VISITA;

PROCEDURE LISTAR_VISITA(c_visita OUT T_CURSOR_VISITA)
IS
BEGIN
	OPEN c_visita FOR
		SELECT vi.IDVISITA, vi.FECHA, vi.IDESTADO, cl.RUT AS "RUT CLIENTE", pf.RUT AS "RUT PROFESIONAL",cl.nombre||' '||cl.apepaterno AS "NOMBRE CLIENTE",
		pf.nombre||' '||pf.apepaterno AS "NOMBRE PROFESIONAL" FROM VISITA vi
		INNER JOIN PLANCONTRATADO pl ON vi.idplan=pl.IDPLAN
		INNER JOIN CLIENTE cl ON cl.IDCLIENTE = pl.IDCLIENTE
		INNER JOIN PROFESIONAL pf ON pf.IDPROFESIONAL=pl.IDPROFESIONAL;
END LISTAR_VISITA;

END PKG_VISITA;


--PROCEDIMIENTOS MODIFICADOS
  CREATE OR REPLACE PACKAGE "NOMAS"."PKG_PLANCONTRATADO" 
IS
TYPE T_CURSOR_PLANCONTRATADO IS REF CURSOR;
PROCEDURE INSERTAR_PLANCONTRATADO(idPlan_c NUMBER,fecPlan_c DATE,precio_c NUMBER,sucursal_c VARCHAR2,estado_c NUMBER,idCliente_c NUMBER,idProfesional_c NUMBER);
PROCEDURE MODIFICAR_PLANCONTRATADO(idPlan_c NUMBER,fecPlan_c DATE,precio_c NUMBER,sucursal_c VARCHAR2,estado_c NUMBER,idCliente_c NUMBER,idProfesional_c NUMBER);
PROCEDURE ELIMINAR_PLANCONTRATADO(idPlan_c NUMBER);
PROCEDURE LISTAR_PLANCONTRATADO(c_plancontratado OUT T_CURSOR_PLANCONTRATADO);
PROCEDURE BUSCAR_PLANCONTRATADO(idPlan_c NUMBER,c_plancontratado OUT T_CURSOR_PLANCONTRATADO);
PROCEDURE OBTENER_PLANCONTRATADO_CLI(idCliente_c NUMBER, c_plancontratado OUT T_CURSOR_PLANCONTRATADO);
PROCEDURE OBTENER_PLANCONTRATADO_PROF(idProfesional_c NUMBER, c_plancontratado OUT T_CURSOR_PLANCONTRATADO);
END PKG_PLANCONTRATADO;

/
--------------------------------------------------------
--  DDL for Package Body PKG_PLANCONTRATADO
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_PLANCONTRATADO" 
IS
PROCEDURE INSERTAR_PLANCONTRATADO(idPlan_c NUMBER,fecPlan_c DATE,precio_c NUMBER,sucursal_c VARCHAR2,estado_c NUMBER,idCliente_c NUMBER,idProfesional_c NUMBER)
IS
BEGIN
INSERT INTO PLANCONTRATADO VALUES (IDPLANCONTRATADO.NEXTVAL,fecPlan_c,precio_c,sucursal_c,estado_c,idCliente_c,idProfesional_c);
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END INSERTAR_PLANCONTRATADO;

PROCEDURE MODIFICAR_PLANCONTRATADO(idPlan_c NUMBER,fecPlan_c DATE,precio_c NUMBER,sucursal_c VARCHAR2,estado_c NUMBER,idCliente_c NUMBER,idProfesional_c NUMBER)
IS
BEGIN
UPDATE PLANCONTRATADO
SET
fecPlan = fecPlan_c,
precio = precio_c,
sucursal = sucursal_c,
estado = estado_c,
idCliente = idCliente_c,
idProfesional = idProfesional_c
WHERE
idPlan = idPlan_c;
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END MODIFICAR_PLANCONTRATADO;

PROCEDURE ELIMINAR_PLANCONTRATADO(idPlan_c NUMBER)
IS
BEGIN
DELETE FROM PLANCONTRATADO
WHERE
idPlan = idPlan_c;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_PLANCONTRATADO;

PROCEDURE LISTAR_PLANCONTRATADO(c_plancontratado OUT T_CURSOR_PLANCONTRATADO)
IS
BEGIN
  OPEN c_plancontratado FOR
    SELECT * FROM PLANCONTRATADO;
END;

PROCEDURE BUSCAR_PLANCONTRATADO(idPlan_c NUMBER,c_plancontratado OUT T_CURSOR_PLANCONTRATADO)
IS
BEGIN
  OPEN c_plancontratado FOR
    SELECT * FROM PLANCONTRATADO WHERE idPlan = idPlan_c;
END;

PROCEDURE OBTENER_PLANCONTRATADO_CLI(idCliente_c NUMBER, c_plancontratado OUT T_CURSOR_PLANCONTRATADO)
IS
BEGIN
	OPEN c_plancontratado FOR
		SELECT * FROM PLANCONTRATADO WHERE idCliente = idCliente_c;
END;

PROCEDURE OBTENER_PLANCONTRATADO_PROF(idProfesional_c NUMBER, c_plancontratado OUT T_CURSOR_PLANCONTRATADO)
IS
BEGIN
  OPEN c_plancontratado FOR
    SELECT pc.*,cl.rut,cl.nombre||' '||cl.apepaterno||' '||cl.apematerno AS "NOMBRE" FROM PLANCONTRATADO pc
    INNER JOIN CLIENTE cl ON cl.idcliente=pc.idcliente
    WHERE idProfesional = idProfesional_c;
END;


END PKG_PLANCONTRATADO;

/

--------------------------------------------------------
--  DDL for Package PKG_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "NOMAS"."PKG_CLIENTE" 
IS
TYPE T_CURSOR_CLIENTE IS REF CURSOR;
PROCEDURE INSERTAR_CLIENTE(idCliente_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,direccion_c VARCHAR2,email_c VARCHAR2,telefono_c VARCHAR2,idComuna_c NUMBER,idRubro_c NUMBER,idUsuario_c NUMBER);
PROCEDURE MODIFICAR_CLIENTE(idCliente_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,direccion_c VARCHAR2,email_c VARCHAR2,telefono_c VARCHAR2,idComuna_c NUMBER,idRubro_c NUMBER,idUsuario_c NUMBER);
PROCEDURE ELIMINAR_CLIENTE(idCliente_c NUMBER);
PROCEDURE LISTAR_CLIENTE(c_cliente OUT T_CURSOR_CLIENTE);
PROCEDURE BUSCAR_CLIENTE(rut_c VARCHAR2,c_cliente OUT T_CURSOR_CLIENTE);
PROCEDURE BUSCAR_CLIENTE_USU(idUsuario_c NUMBER,c_cliente OUT T_CURSOR_CLIENTE);
END PKG_CLIENTE;

/

--------------------------------------------------------
--  DDL for Package Body PKG_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_CLIENTE" 
IS

PROCEDURE INSERTAR_CLIENTE(idCliente_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,direccion_c VARCHAR2,email_c VARCHAR2,telefono_c VARCHAR2,idComuna_c NUMBER,idRubro_c NUMBER,idUsuario_c NUMBER)
IS
BEGIN
INSERT INTO CLIENTE VALUES (IDCLIENTE.NEXTVAL,rut_c,nombre_c,apePaterno_c,apeMaterno_c,direccion_c,email_c,telefono_c,idComuna_c,idRubro_c,idUsuario_c);
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END INSERTAR_CLIENTE;

PROCEDURE MODIFICAR_CLIENTE(idCliente_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,direccion_c VARCHAR2,email_c VARCHAR2,telefono_c VARCHAR2,idComuna_c NUMBER,idRubro_c NUMBER,idUsuario_c NUMBER)
IS
BEGIN
UPDATE CLIENTE
SET
rut = rut_c,
nombre = nombre_c,
apePaterno = apePaterno_c,
apeMaterno = apeMaterno_c,
direccion = direccion_c,
email = email_c,
telefono = telefono_c,
idComuna = idComuna_c,
idRubro = idRubro_c,
idUsuario = idUsuario_c
WHERE
idCliente = idCliente_c;
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END MODIFICAR_CLIENTE;


PROCEDURE ELIMINAR_CLIENTE(idCliente_c NUMBER)
IS
BEGIN
DELETE FROM CLIENTE
WHERE
idCliente = idCliente_c;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_CLIENTE;

PROCEDURE LISTAR_CLIENTE(c_cliente OUT T_CURSOR_CLIENTE)
IS
BEGIN
  OPEN c_cliente FOR
    SELECT * FROM CLIENTE;  
END;

PROCEDURE BUSCAR_CLIENTE(rut_c VARCHAR2,c_cliente OUT T_CURSOR_CLIENTE)
IS
BEGIN
  OPEN c_cliente FOR
    SELECT * FROM CLIENTE WHERE rut = rut_c;  
END;

PROCEDURE BUSCAR_CLIENTE_USU(idUsuario_c NUMBER,c_cliente OUT T_CURSOR_CLIENTE)
IS
BEGIN
  OPEN c_cliente FOR
    SELECT * FROM CLIENTE WHERE idUsuario = idUsuario_c;  
END;

END PKG_CLIENTE;

/

--------------------------------------------------------
--  DDL for Package PKG_EVENTO
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "NOMAS"."PKG_EVENTO" 
IS
TYPE T_CURSOR_EVENTO IS REF CURSOR;
PROCEDURE INSERTAR_EVENTO(descripcion_c VARCHAR2,idTipoEvento_c NUMBER,idPlan_c NUMBER);
PROCEDURE MODIFICAR_EVENTO(idEvento_c NUMBER,asesoria_c VARCHAR2,fecha_c DATE,idTipoEvento_c NUMBER,idPlan_c NUMBER);
PROCEDURE ELIMINAR_EVENTO(idEvento_c NUMBER);
PROCEDURE LISTAR_EVENTO(c_evento OUT T_CURSOR_EVENTO);
PROCEDURE LISTAR_EVENTOS_PLAN(idPlan_c NUMBER,c_evento OUT T_CURSOR_EVENTO);
PROCEDURE BUSCAR_EVENTO(idEvento_c NUMBER, c_evento OUT T_CURSOR_EVENTO);
PROCEDURE SOLICITAR_ASESORIA(fecha_c DATE, descripcion_c VARCHAR2, idPlan_c NUMBER);
END PKG_EVENTO;

/
--------------------------------------------------------
--  DDL for Package Body PKG_EVENTO
--------------------------------------------------------
--CAMBIADO INSERTAR EVENTO
  CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_EVENTO" 
IS

PROCEDURE INSERTAR_EVENTO(descripcion_c VARCHAR2,idTipoEvento_c NUMBER,idPlan_c NUMBER)
IS
BEGIN
INSERT INTO EVENTO VALUES (IDEVENTO.NEXTVAL, descripcion_c,NULL,SYSDATE,idTipoEvento_c,idPlan_c);
COMMIT;
END INSERTAR_EVENTO;

PROCEDURE MODIFICAR_EVENTO(idEvento_c NUMBER,asesoria_c VARCHAR2,fecha_c DATE,idTipoEvento_c NUMBER,idPlan_c NUMBER)
IS
BEGIN
UPDATE EVENTO
SET
asesoria = asesoria_c,
fecha = fecha_c,
idTipoEvento = idTipoEvento_c,
idPlan = idPlan_c
WHERE
idEvento = idEvento_c;
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END MODIFICAR_EVENTO;

PROCEDURE ELIMINAR_EVENTO(idEvento_c NUMBER)
IS
BEGIN
DELETE FROM EVENTO
WHERE
idEvento = idEvento_c;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_EVENTO;

PROCEDURE LISTAR_EVENTO(c_evento OUT T_CURSOR_EVENTO)
IS
BEGIN
  OPEN c_evento FOR
    SELECT * FROM EVENTO;
END;

PROCEDURE LISTAR_EVENTOS_PLAN(idPlan_c NUMBER,c_evento OUT T_CURSOR_EVENTO)
IS
BEGIN
  OPEN c_evento FOR
    SELECT ev.DESCRIPCION,tp.descripcion AS TIPO,NVL(ev.ASESORIA,' ') AS RESPUESTA,TO_CHAR(ev.FECHA,'dd/MM/yyyy HH:mm') AS FECHA  FROM EVENTO ev
    JOIN TIPOEVENTO tp ON tp.IDTIPOEVENTO = ev.IDTIPOEVENTO WHERE ev.IDPLAN = 5;
END;

PROCEDURE BUSCAR_EVENTO(idEvento_c NUMBER, c_evento OUT T_CURSOR_EVENTO)
IS
BEGIN
  OPEN c_evento FOR
    SELECT * FROM EVENTO WHERE idEvento_c = idEvento;
END;

PROCEDURE SOLICITAR_ASESORIA(fecha_c DATE, descripcion_c VARCHAR2, idPlan_c NUMBER)
IS
BEGIN
  INSERT INTO EVENTO VALUES (IDEVENTO.NEXTVAL, descripcion_c,NULL,fecha_c,5,idPlan_c);
  COMMIT;
END;
END PKG_EVENTO;

/

--------------------------------------------------------
--  DDL for Package PKG_CHECKLIST
--------------------------------------------------------

--CAMBIADO LISTARCHECK, MODIFICAR CHECK PARAMETROS
  CREATE OR REPLACE PACKAGE "NOMAS"."PKG_CHECKLIST" 
IS
TYPE T_CURSOR_CHECKLIST IS REF CURSOR;
PROCEDURE INSERTAR_CHECKLIST(descripcion_c VARCHAR2,idPlan_c NUMBER);
PROCEDURE MODIFICAR_CHECKLIST(idCheck_c NUMBER,descripcion_c VARCHAR2);
PROCEDURE ELIMINAR_CHECKLIST(idCheck_c NUMBER);
PROCEDURE LISTAR_CHECKLIST(idPlan_c NUMBER, c_checklist OUT T_CURSOR_CHECKLIST);
PROCEDURE BUSCAR_CHECKLIST(descripcion_c VARCHAR2,c_checklist OUT T_CURSOR_CHECKLIST);
END PKG_CHECKLIST;

/

  CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_CHECKLIST" 
IS

PROCEDURE INSERTAR_CHECKLIST(descripcion_c VARCHAR2,idPlan_c NUMBER)
IS
BEGIN
INSERT INTO CHECKLIST VALUES (IDCHECKLIST.NEXTVAL,descripcion_c,idPlan_c);
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END INSERTAR_CHECKLIST;

PROCEDURE MODIFICAR_CHECKLIST(idCheck_c NUMBER,descripcion_c VARCHAR2)
IS
  V_CANTIDAD NUMBER;
  V_IDPLAN NUMBER;
  V_PRECIO NUMBER;
  V_IDBOLETA NUMBER;
BEGIN
UPDATE CHECKLIST
SET
descripcion = descripcion_c
WHERE
idCheck = idCheck_c;
INSERT INTO MODIFICACIONCHECK VALUES(IDMODIFICACIONCHECK.NEXTVAL,SYSDATE,idCheck_c);

SELECT COUNT(mc.idcheck) INTO V_CANTIDAD FROM CHECKLIST ch
INNER JOIN MODIFICACIONCHECK mc ON mc.IDCHECK = ch.IDCHECK
GROUP BY ch.idplan;

--AGREGAR LA SELECCION SOLAMENTE DEL MES

IF V_CANTIDAD > 2 THEN
  SELECT IDPLAN INTO V_IDPLAN FROM CHECKLIST WHERE idcheck=idCheck_c;
  SELECT PRECIO*0.10 INTO V_PRECIO FROM PLANCONTRATADO WHERE idPlan=V_IDPLAN;
  SELECT IDBOLETA INTO V_IDBOLETA FROM BOLETA WHERE idPlan = V_IDPLAN;
  INSERT INTO DETALLEBOLETA VALUES(IDDETALLEBOLETA.NEXTVAL, V_PRECIO, V_IDBOLETA, 4);
END IF;
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END MODIFICAR_CHECKLIST;

PROCEDURE ELIMINAR_CHECKLIST(idCheck_c NUMBER)
IS
BEGIN
DELETE FROM CHECKLIST
WHERE
idCheck = idCheck_c;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_CHECKLIST;

PROCEDURE LISTAR_CHECKLIST(idPlan_c NUMBER, c_checklist OUT T_CURSOR_CHECKLIST)
IS
BEGIN
  OPEN c_checklist FOR
    SELECT * FROM CHECKLIST WHERE idPlan = idPlan_c;
END;

PROCEDURE BUSCAR_CHECKLIST(descripcion_c VARCHAR2,c_checklist OUT T_CURSOR_CHECKLIST)
IS
BEGIN
  OPEN c_checklist FOR
    SELECT * FROM CHECKLIST WHERE descripcion = descripcion_c;
END;

END PKG_CHECKLIST;

/
--------------------------------------------------------
--  DDL for Package PKG_PROFESIONAL
--------------------------------------------------------

--Agregado Buscar profesional usu
  CREATE OR REPLACE PACKAGE "NOMAS"."PKG_PROFESIONAL" 
IS
TYPE T_CURSOR_PROFESIONAL IS REF CURSOR;
PROCEDURE INSERTAR_PROFESIONAL(idProfesional_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,telefono_c VARCHAR2,fecNacimiento_c DATE,idComuna_c NUMBER,idUsuario_c NUMBER);
PROCEDURE MODIFICAR_PROFESIONAL(idProfesional_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,telefono_c VARCHAR2,fecNacimiento_c DATE,idComuna_c NUMBER,idUsuario_c NUMBER);
PROCEDURE ELIMINAR_PROFESIONAL(idProfesional_c NUMBER);
PROCEDURE LISTAR_PROFESIONAL(c_profesional OUT T_CURSOR_PROFESIONAL);
PROCEDURE BUSCAR_PROFESIONAL(rut_c VARCHAR2,c_profesional OUT T_CURSOR_PROFESIONAL);
PROCEDURE BUSCAR_PROFESIONAL_USU(idUsuario_c NUMBER,c_profesional OUT T_CURSOR_PROFESIONAL);
END PKG_PROFESIONAL;

/

  CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_PROFESIONAL" 
IS
PROCEDURE INSERTAR_PROFESIONAL(idProfesional_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,telefono_c VARCHAR2,fecNacimiento_c DATE,idComuna_c NUMBER ,idUsuario_c NUMBER)
IS
BEGIN
INSERT INTO PROFESIONAL VALUES (IDPROFESIONAL.NEXTVAL,rut_c,nombre_c,apePaterno_c,apeMaterno_c,telefono_c,fecNacimiento_c,idComuna_c,idUsuario_c);
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END INSERTAR_PROFESIONAL;

PROCEDURE MODIFICAR_PROFESIONAL(idProfesional_c NUMBER,rut_c VARCHAR2,nombre_c VARCHAR2,apePaterno_c VARCHAR2,apeMaterno_c VARCHAR2,telefono_c VARCHAR2,fecNacimiento_c DATE,idComuna_c NUMBER,idUsuario_c NUMBER)
IS
BEGIN
UPDATE PROFESIONAL
SET
rut= rut_c,
nombre =nombre_c,
apePaterno = apePaterno_c,
apeMaterno = apeMaterno_c,
telefono = telefono_c,
fecNacimiento = fecNacimiento_c,
idComuna = idComuna_c,

idUsuario = idUsuario_c
WHERE
idProfesional = idProfesional_c;
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END MODIFICAR_PROFESIONAL;

PROCEDURE ELIMINAR_PROFESIONAL(idProfesional_c NUMBER)
IS
BEGIN
DELETE FROM PROFESIONAL
WHERE
idProfesional = idProfesional_c;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_PROFESIONAL;

PROCEDURE LISTAR_PROFESIONAL(c_profesional OUT T_CURSOR_PROFESIONAL)
IS
BEGIN
  OPEN c_profesional FOR
    SELECT * FROM PROFESIONAL;
END;

PROCEDURE BUSCAR_PROFESIONAL(rut_c VARCHAR2,c_profesional OUT T_CURSOR_PROFESIONAL)
IS
BEGIN
  OPEN c_profesional FOR
    SELECT * FROM PROFESIONAL WHERE rut = rut_c;
END;

PROCEDURE BUSCAR_PROFESIONAL_USU(idUsuario_c NUMBER,c_profesional OUT T_CURSOR_PROFESIONAL)
IS
BEGIN
    OPEN c_profesional FOR
      SELECT * FROM PROFESIONAL WHERE idUsuario = idUsuario_c; 
END;

END PKG_PROFESIONAL;

/
--------------------------------------------------------
--  DDL for Package PKG_CAPACITACION
--------------------------------------------------------

   CREATE OR REPLACE PACKAGE "NOMAS"."PKG_CAPACITACION" 
IS
TYPE T_CURSOR_CAPACITACION IS REF CURSOR;
PROCEDURE INSERTAR_CAPACITACION(fecha_c DATE,descripcion_c VARCHAR2,cantAsistentes_c NUMBER,idPlan_c NUMBER);
PROCEDURE MODIFICAR_CAPACITACION(idCapacitacion_c NUMBER,fecha_c DATE,descripcion_c VARCHAR2,cantAsistentes_c NUMBER,idPlan_c NUMBER);
PROCEDURE ELIMINAR_CAPACITACION(idCapacitacion_c NUMBER);
PROCEDURE LISTAR_CAPACITACION(c_capacitacion OUT T_CURSOR_CAPACITACION);
PROCEDURE BUSCAR_CAPACITACION(descripcion_c VARCHAR2, c_capacitacion OUT T_CURSOR_CAPACITACION);
PROCEDURE LISTAR_CAPACITACION_CLI(idPlan_c NUMBER, c_capacitacion OUT T_CURSOR_CAPACITACION);
END PKG_CAPACITACION;

/

  CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_CAPACITACION" 
IS

PROCEDURE INSERTAR_CAPACITACION(fecha_c DATE,descripcion_c VARCHAR2,cantAsistentes_c NUMBER,idPlan_c NUMBER)
IS
BEGIN
INSERT INTO CAPACITACION VALUES (IDCAPACITACION.NEXTVAL,fecha_c,descripcion_c,cantAsistentes_c,idPlan_c);
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END INSERTAR_CAPACITACION;

PROCEDURE MODIFICAR_CAPACITACION(idCapacitacion_c NUMBER,fecha_c DATE,descripcion_c VARCHAR2,cantAsistentes_c NUMBER,idPlan_c NUMBER)
IS
BEGIN
UPDATE CAPACITACION
SET
fecha = fecha_c,
descripcion = descripcion_c,
cantAsistentes = cantAsistentes_c,
idPlan = idPlan_c
WHERE
idCapacitacion = idCapacitacion_c;
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END MODIFICAR_CAPACITACION;

PROCEDURE ELIMINAR_CAPACITACION(idCapacitacion_c NUMBER)
IS
BEGIN
DELETE FROM CAPACITACION
WHERE
idCapacitacion = idCapacitacion_c;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_CAPACITACION;

PROCEDURE LISTAR_CAPACITACION(c_capacitacion OUT T_CURSOR_CAPACITACION)
IS
BEGIN
  OPEN c_capacitacion FOR
    SELECT * FROM CAPACITACION;
END;

PROCEDURE BUSCAR_CAPACITACION(descripcion_c VARCHAR2, c_capacitacion OUT T_CURSOR_CAPACITACION)
IS
BEGIN
  OPEN c_capacitacion FOR
    SELECT * FROM CAPACITACION WHERE descripcion = descripcion_c;
END;

PROCEDURE LISTAR_CAPACITACION_CLI(idPlan_c NUMBER, c_capacitacion OUT T_CURSOR_CAPACITACION)
IS
BEGIN
  OPEN c_capacitacion FOR
    SELECT * FROM CAPACITACION WHERE idPlan = idPlan_c;
END;

END PKG_CAPACITACION;

/


  CREATE OR REPLACE PACKAGE "NOMAS"."PKG_CHECKLISTREPORTE" 
IS
TYPE T_CURSOR_CHECKREPORTE IS REF CURSOR;
PROCEDURE INSERTAR_CHECKLISTREPORTE(estadoCheck_c NUMBER,mejora_c VARCHAR2,idCheckList_c NUMBER);
PROCEDURE MODIFICAR_CHECKLISTREPORTE(idCheckReporte_c NUMBER,estadoCheck_c NUMBER,fecha_c DATE,mejora_c VARCHAR2,idCheckList_c NUMBER);
PROCEDURE ELIMINAR_CHECKLISTREPORTE(idCheckReporte_c NUMBER);
PROCEDURE LISTAR_CHECKREPORTE(c_checkreporte OUT T_CURSOR_CHECKREPORTE);
PROCEDURE BUSCAR_CHECKREPORTE(mejora_c VARCHAR2, c_checkreporte OUT T_CURSOR_CHECKREPORTE);
END PKG_CHECKLISTREPORTE;

/

  CREATE OR REPLACE PACKAGE BODY "NOMAS"."PKG_CHECKLISTREPORTE" 
IS

PROCEDURE INSERTAR_CHECKLISTREPORTE(estadoCheck_c NUMBER,mejora_c VARCHAR2,idCheckList_c NUMBER)
IS
BEGIN
    INSERT INTO CHECKLISTREPORTE VALUES (IDCHECKLISTREPORTE.NEXTVAL,estadoCheck_c,SYSDATE,mejora_c,idCheckList_c);
COMMIT;
END INSERTAR_CHECKLISTREPORTE;

PROCEDURE MODIFICAR_CHECKLISTREPORTE(idCheckReporte_c NUMBER,estadoCheck_c NUMBER,fecha_c DATE,mejora_c VARCHAR2,idCheckList_c NUMBER)
IS
BEGIN
UPDATE CHECKLISTREPORTE
SET
estadoCheck = estadoCheck_c,
fecha = fecha_c,
mejora = mejora_c,
idCheckList = idCheckList_c
WHERE
idCheckReporte = idCheckReporte_c;
COMMIT;
EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
    END MODIFICAR_CHECKLISTREPORTE;

PROCEDURE ELIMINAR_CHECKLISTREPORTE(idCheckReporte_c NUMBER)
IS
BEGIN
DELETE FROM CHECKLISTREPORTE
WHERE
idCheckReporte = idCheckReporte_c;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
            ROLLBACK;
END ELIMINAR_CHECKLISTREPORTE;

PROCEDURE LISTAR_CHECKREPORTE(c_checkreporte OUT T_CURSOR_CHECKREPORTE)
IS
BEGIN
  OPEN c_checkreporte FOR 
    SELECT * FROM CHECKLISTREPORTE;
END;

PROCEDURE BUSCAR_CHECKREPORTE(mejora_c VARCHAR2, c_checkreporte OUT T_CURSOR_CHECKREPORTE)
IS
BEGIN
  OPEN c_checkreporte FOR 
    SELECT * FROM CHECKLISTREPORTE WHERE mejora = mejora_c;
END;


END PKG_CHECKLISTREPORTE;

/

CREATE OR REPLACE TRIGGER INSERTAR_BOLETA
AFTER UPDATE of estadoBoleta ON BOLETA 
FOR EACH ROW
when (NEW.estadoBoleta=1)
BEGIN
  INSERT INTO BOLETA VALUES(IDBOLETA.NEXTVAL, ADD_MONTHS(:OLD.FECPAGO,1),ADD_MONTHS(:OLD.FECPAGO,1)+5,0,0,:OLD.IDPLAN);
END INSERTAR_BOLETA;

CREATE OR REPLACE TRIGGER ACTUALIZAR_BOLETA
AFTER INSERT ON DETALLEBOLETA 
FOR EACH ROW
BEGIN
  UPDATE BOLETA SET MONTO=:OLD.
  INSERT INTO DETALLEBOLETA VALUES(IDBOLETA.NEXTVAL, ADD_MONTHS(:OLD.FECPAGO,1),ADD_MONTHS(:OLD.FECPAGO,1)+5,0,0,:OLD.IDPLAN);
END INSERTAR_BOLETA;

